
The make script defines two array size parameters: mm and mmpix.
and a polynomial order, mmpoly (for spatial fits to PSF variation)
mm is the maximum shapelet order. From that is derived 
* msh, the size of the vector to hold a shapelet expansion. It is
equal to 2 + (mm+1)*(mm+2)/2 
mmpix^2 is the maximum size of an image.


code.F:        function seriessum(shape)
   - returns total flux in the shape

code.F:        subroutine decode(shape,z,mz,nz)
   - turns shape into an array z of size nz,nz (declared dim of z mz,mz)

code.F:        subroutine encode(z,mz,nz,xc,yc,robj,bg,shape,n,beta)
   - turns array z into a shape centered on pixel xc,yc
     use info within radius robj; subtract background bg
     use given n and beta for decomposition. This is done through
     direct summation, using orthogonality relations. No pixel integration.

code.F:      subroutine putinimage(shape,xc,yc,radius,bg,pix,nx,ny)
   - place shape into image array pix(nx,ny) (declared dimension mmpix^2). 
     Centroid for shape is xc,yc, radius is radius. Overwrites circular patch.
     Adds background bg. 

code.F:      subroutine addtoimage(shape,xc,yc,radius,pix,nx,ny)
   - As putinimage, except now the shape is added to pix array.

code.F:      subroutine writeshape(text,shape)
   - write out shape coefs

code.F:      subroutine writeshapen(text,shape)
   - write out shape coefs after normalization to largest coeff.

code.F:      subroutine fitshapelets(z,mz,nx,ny,xc,yc,robj,bg,shape,n,beta)
   - Do a least-squares shapelets expansion fit to array z(nx,ny) (decl dim mz)
     The shapelet is centered on xc,yc, has scale radius beta, order n. A
     circular patch of radius robj is fitted. Result in shape vector.
     If on input beta<=0, its value is fitted first. Result >=|beta|
     If on input bg=0., its value is fitted first.

code.F: subroutine fitshapeletserr(z,zerr,mz,nx,ny,xc,yc,robj,bg,shape,sherr,
       n,beta)
   - As fitshapelets, but now also produces error estimate sherr on shape
     coefficient 00 (ignores covariances). zerr is an array of errors on the
     z pixels.

code.F: subroutine fitshapeletscov(z,zerr,mz,nx,ny,xc,yc,robj,bg,shape,sherr,
       shcov,n,beta)
   - As fitshapeletserr, but now returns the full covariance matrix on
the shape coeffs as shcov (declared dimen msh-2,msh-2)

code.F:      subroutine fitbg(z,mz,nx,ny,xc,yc,robj,bg)
   - fit a background value around an object, in annulus between
     radius robj and 2*robj, centered on xc,yc in pixel array z

code.F:      subroutine fitbeta(z,mz,nx,ny,xc,yc,robj,bg,beta)
   - fit a scale radius beta by fitting a gaussian to a circular
     patch, radius robj, center xc,yc in pixel array z. Assume
     background value bg.

code.F:      subroutine centershape(sh,sh2,dx,dy)
   - shift shape sh so that the 10 and 01 coeffs vanish. Result in
sh2. Shifts in units of pixels in dx and dy.

code.F:     subroutine htab(x,nn,t)
   - Returns table t of Hermite poly evaluated at x, order 0..nn


convolve.F:    subroutine convolve(shape1,shape2,betaout,result)
   - convolve shape1 and shape2 into result, encode it with betaout. 
     Required Clmn coeffs are calculated if required

convolve.F:    subroutine setcmatrix(cmat,beta1,beta2,betaout,n)
   - construct the convolution matrix cmat, for convolution of
     shapelest of scale radii beta1 and beta2 to betaout. Calculate coeffs
     up to order n


fitpoly.F:      subroutine fitpoly(ndat,xm,ym,x,y,tofit,w,norder,niter,
     clip,coefs,bestfit)
   - fit the ndat data points  (x,y,tofit) with poly's in x and y, to
     total combined order norder. w is the weight of each point. clip is the
     number of sigmas to clip (niter iterations). On output, coefs contains
     the poly coefs, and bestfit the model values at each data point.
     xm and ym are rescaling factors for x and y, in case they are
     very large.

fitpoly.F:      subroutine interpolpsf(x,y,xm,ym,coef,n,beta,nfit,sh)
   - Evaluate the fitted PSF at position x,y. coef is now a 2-D array
     containing the poly coefs for each PSF shapelet coef.


fits.F       subroutine get2err (im,imerr,nx,ny,zz,zerr,maxx,maxy)
   - import 2D fits image im, and corresponding error image imerr, to z & zerr.
     returns dimension nx,ny of arrays. Declared dimensions maxx, maxy

fits.F:      subroutine guess_errors(zz,zerr,nx,ny,maxx,maxy)
   - reconstruct errors for zz image assuming gaussian stats of background 
     (based on distance between median and lower quartile)

fits.F:      subroutine get2 (imagename,nx,ny,zz,maxx,maxy)
   - imports 2D fits image to zz array

fits.F:      subroutine put2(image,nx,ny,pix,mx,my)
   - writes array pix as a fits image. Declared dimen of pix is (mx,my)


fitshear.F:      subroutine fitshearshift_err(shape,sherr,g1,g2,g1sig,g2sig,coefs,covar,verbose)
   - fit the shear of a shapelet, propagates error sherr to result.
     output is g1, g2, corresponding 1-sigma errors and covariance matrix
               coefs are the amplitudes of the best-fit, pre-shear, pre-smear, 
               round shape. This routine shifts the shape till best fit is found.
fitshear.F:      subroutine fitshear_err(shape,sherr,g1,g2,g1sig,g2sig,coefs,covar,verbose)
   - as above, but without the freedom to shift the shapes

fitshear.F:      subroutine fitshear(shape,g1,g2,g1sig,g2sig,coefs,covar,verbose)
   - as above, but without error propagation. Error on shapelet coefs assumed=1

fitshear.F:      subroutine funcshift(cpt,a,y,dyda,ma)
   - auxiliary function for minimization in fitshear_errshift

fitshear.F:      subroutine funcs(cpt,a,y,dyda,ma)
   - auxiliary function for minimization in fitshear_err and fitshear

fracpower.F:      subroutine plotsegment(x1,y1,x2,y2,icol)
fracpower.F:      subroutine plothor(x1,x2,y)
fracpower.F:      subroutine plotvert(x,y1,y2)


operators.F:      subroutine a1(inshape,outshape)
   - act ladder operator in x on inshape, produce outshape
operators.F:      subroutine a2(inshape,outshape)
   - act ladder operator in y on inshape, produce outshape
operators.F:      subroutine a1d(inshape,outshape)
   - act ladder operator in x on inshape, produce outshape
operators.F:      subroutine a2d(inshape,outshape)
   - act ladder operator in y on inshape, produce outshape
operators.F:   subroutine trans1(inshape,outshape)
   - return x-translation operator's action on inshape (units of beta)
operators.F:   subroutine trans2(inshape,outshape)
   - return y-translation operator's action on inshape (units of beta)
operators.F:   subroutine conv(inshape,outshape)
   - return convergence operator's action on inshape
operators.F:   subroutine rot(inshape,outshape)
   - return rotation operator's action on inshape
operators.F:   subroutine shear1(inshape,outshape)
   - return Shear-1 operator's action on inshape
operators.F:   subroutine shear2(inshape,outshape)
   - return Shear-2 operator's action on inshape


plotshape.F:   subroutine plotshape(shape,nbin,title)
   - plot the shape on an nbin x nbin grid in an X window; lists 0-2 moments

plotshape.F:      subroutine compare(z,mz,nx,ny,xc,yc,bg,r,sh)
   - plot the shape sh next to the bit of image z centered on xc,yc, and the 
     difference. Only works for shapes that are centered on integer pixel?

plotshape.F:      subroutine showpatch(z,mx,my,nx,ny,x,y,rplot,bg,fg)
   - display part of image z in greyscale.


readpars.F:      subroutine readorders(n,nfit)
   - read in the ordes of shapelets and poly fits from orders.par


setpsfmat.F:   subroutine setpsfmat(shpsf,betaout,beta,psfmat)
   - construct the convolution matrix for shapelet coefs from PSF shape


setroundshear.F: subroutine setroundshear(pmat,round,sheared1,sheared2)
   - construct three series of basis functions for shear measurements

setroundshearshift.F:      subroutine setroundshearshift(pmat,round,sheared1,sheared2,shifted1,shifted2)
   - as above, but also add basis functions for centroid shifts.


Method for fitting the shear:

 You model the observed average galaxy as a round object that has been
sheared, then smeared by PSF P.
 The intrinsic round object R is expressed as a combination of
shapelets of different order, one set per radial order (so effectively
polar shapelets with m=0), with unkown coeffs. You then model the
observed average galaxy G as

  G= P . (1 + g1 S1 + g2 S2 ) . R

and you least-squares fit the right-hand expression to G. This is done
in shapelet space. If you work to order N, you fit (N/2+1) parameters
for the coefficients of R (n=0,2,4,.. N), and the two distortion
parameters g1 and g2. The model is almost linear, only g1 and g2 are
coupled to the shapelet coefficients of R; a very few iterations of
least-squares fitting gives the answer. I use MRQ from numerical
recipes.

There are some subtleties to do with the pixelization which also work
out.  (ie you really observe PSF x pixel and sheared galaxy x PSF
pixel, but you can treat PSF x pixel as an effective PSF and dont need
to care about this any further).


I encode an image into shapelets by fitting all pixels within a
certain radius of the center, rather than by direct summation over
pixel values. This works better for finite (small) radius of an
object, and also when beta approaches the pixel scale.


Timings: (testreal)
 using the fitting method, n=10, 52 sources takes 1.6 sec.
         same except doing each source 10x takes 4.2 sec 
                             (no need to rebuild fit matrix)
 if I fix beta a priori it take longer (7 s instead of 1.6 - because
fit a larger number of pixels? 

 with the direct summation takes 0.3 sec!


PSF fitting

*first select psfstars interactively from a catalogue, using selectpsfstars.
This makes a filtered list of only PSF sources.
*then fit shapelet coefs to these using a single value for beta.
This is done by psfcat2sh, which reads the psfcat from stdin, writes out the shapelets to stdout, and comments to stderr.
e.g.
( ../psfcat2sh < psf.cat > psf.sh ) >& errorlog 

PSF map making

*now make a poly fit to all shapelet coefs of the PSF
 fitpsfmap < psf.sh > psf.map
This makes a PS plot showing the residuals vs x and y, coeff per coeff
The file psf.map give the poly coefs of each normalized dhapelet coeff:
format:
n,beta
nfit,xscale,yscale
shapelet coef 3: coefs of 1, x, y, x^2, xy, y^2, x^3, x^2y, ...
shapelet coef 4: ditto
 ...

It is possible to pipe this all together: (see doit.csh)

../selectpsfstars < test.cat | ../psfcat2sh | ../fitpsfmap | grep -v PGPLOT > psf.map

Then showpsfmap < psf.map will make a plot of the PSF at various positions in the field.

A number of PS files are generated along the way:

psfmap.ps    - PSF at 4x4 grid of positions on the field
psfstars.ps  - For each PSF star, the shapelet expansion and the fitted map
fitpsfmap.ps - The residuals in the poly fit of each PSF cpt with X and Y
psfstarpos.ps- The locations of the PSF stars used, and those rejected.

The sources can all be encoded into shapelets with 
cat2sh < test.cat > test.sh
This reads the orders up to which to fit from 'orders.dat'
Beta's are chosen in a logarithmic sequence, the closest power of
2^0.25 -multiple of beta_psf.
Each beta requires some setting up, so by first sorting the catalogue on size
the encoding can be speeded up quite a bit:
sort -n -k 5 test.cat | cat2sh > test.sh

Each source can then be used to give a shear estimate (fitting with a
sheared circular source convolved with PSF) with
sh2g < test.sh > test.g


An image for comparison with the input fits image can be made with
reconstructimage < test.sh
which inserts all shapelets at their positions, and adds the median background

With some eclipse arithmetic this can give a difference image:
ccube "inimage.fits outimage.fits -" diff.fits
(note the reverse polish notation)


This whole sequence has been scripted in 'doit.csh'.
It requires selecting the PSF stars in a fwhm vs mag plot, and then
inspecting the PS plots that pop up on the screen to see if the
selection worked. i.e. for example:
* did the non-stellar sources get removed from the fit?
* do the PSF stars cover the whole field?
* does the PSF map look reasonable?
* and is the spatial order adequate?


Note the tool colplot which plots 2 columns of a data file against
each other interactively. syntax:
colplot test.g   9 g1   10 g2   "Shear components"


STILL TO SORT OUT:
centroiding at the moment is done with a single translation (doen in
shapelet space that forces the 01 and 10 componetns to zero. This
could be iterated, and also the criterion could be improved.
On the other hand the PSF fits look very good, indicating little
scatter that remains as a result of the centroid uncertainty.
* fakeimage3 allows making an asymmetric PSF (basically it adds a
shifted copy of the PSF to itself). Still works very nicely at
correcting shears, well below % level.

Propagation of photon errors. Now implemented as fitshapeleterr()
routine. 
Is the error on each shapelet coeff really constant?  Answer: yes, to
within 10% or so. The only effect that is strong is that the shifting
of the coefs to make 01 and 10 =0 propagates some noise into the
adjacent 00 and 20,11,02 cpts. The rest do fine. tested with fake
image of identical galaxies (apart from range in flux). Shapelet
expansions should all be the same, scatter should be consistent with
sherr. testsherr tests this, and result is good. Certainly good enough
for propagating photon errors. A new routine, get2err(), reads in an
image and its associated error image. If the latter does not exist, it
looks at the statistics of the pixel values and estimates sigma from
the interval between the 1st quartile and the median. For a gaussian
that should be 0.67 sigma. (Could also use this to determine a gain by
comparing to the sky background - that would give an even better error
model. But since the difference will be important only for the
best-measured sources this is not crucial.)

Next step: propagate also to the shear determination. Trivial - just
set sig to the appropriate values in fitshear.



Extra layer subroutine for reading image and setting pixel error array?
 (if errim exists, use that; otherwise calculate something based on
bg statistics)
DONE - called get2err() 

The distribution of shears looks good if the sources are round
intrinsically - nice cloud around g1=g2=0, plus some outliers with a
bias to them. These turn out to be the PSF stars that give very poor
fits, but because their fluxes are so high the errors are not too
small. Need to filter these out in the shear statistics.


TODO: Filter out implausible shapes (look at fraction of power in
higher terms?)
DONE - WORKS WELL! :
Let P(n) be the fraction of power (= sum of square shape coefs) at
orer n and below. fracpower.F calculates this and plots against Mag,
FWHM and SHERR. P(4)<0.5 seem to be extended sources, quite bright,
with small sherr --> neighbour-affected?

Tests of the whole procedure with a set of fake images:
 - round galaxies, elliptical PSF    (all gaussian)   fakeimage.F
 - sheared galaxies, elliptical PSFs (all gaussian)   fakeimage.F
 - elliptical galaxies, elliptical PSF (all gaussian) fakeimage2.F

Tests on the skymaker images from Ludo vW. 

***Implement simultaneous fit of translation terms as well - so fit
galaxy as

P . ( 1 + g1 S1 + g2 S2 + dx/beta T1 + dy/beta T2 ) . C
to allow for asymmetric (odd-m) PSFs and centroid errors?

***Check the PSF map, which seems to give variable PSF even when there is none.


***sh2p implements a KSB-like polarization/ polarizability estimate.
 seems to be something wrong with the error bars though - propagating
the photon errors through incorrectly?

***stackshear averages galaxies per beta bin, and analyzes the stacked images for shear. Still need to sort out the weighting a bit better. 

***The reason why there seems to be some residual PSF effect may be
that the centroiding error distribution looks like the PSF, and this
induced an ellipticity. If true, should decrease with higher S/N.





After STEP tests, turns out that
 - even at high S/N there is a bias at the 5-10% level (shears underestimated).
   appears to get worse at lower S/N.
test the bias by analysing with different beta's:
 * double beta for galaxies, leave PSF the same
 * x 1.5  beta for galaxies, leave PSF the same
 * leave the gal beta same, increase betaPSF x 0.8

BUGFIX: in seriessum, need to sum over terms i=0,2,..,n and j=0,2,...,n-i
  (previously summed both up to n which led to array overflow).

IMPORTANT CHANGE 
sextractor FWHM parameter is unreliable. Better use FLUX_RADIUS and
multiply by 2. 


IMPORTANT CHANGE 2/6/2005
 based on experiments fitting devauc and expdisk galaxies (IRAF
artdata): discovered that fitshear is very sensitive to the values of
the highest shapelet orders. For devauc these haev not converged to
zero even for N=12. So remedy this by: 

* giving lower wt to coefs avove 2nd order (multiply errors by 4)
* not fitting the highest 2 orders at all (after all these are not in
  the cpts either). 
* increasing fitting radius to max(10,5*beta) from max(10,4*beta)

for expdisk there is not much power in N=12 so not a problem. But for
devauc this is not true at all. Makes a big difference eg shear = 0.06
either fitted as 0.032 or 0.06! 

So now experiment whether N=8 is enough after all.

BUG 3/6/2005

fitshear contained a bug: the model fits a sheared round galaxy of
order N-2. Hence it does not make sense to fit this to the full galaxy
shape: any information at order N is not properly fitted anyway, so
should be ignored. So fitshear now only fits the shapelets coefs to
order N-2, and anything above order 2 (ie coefs 7 and above) is given
a weight reduced by a factor 4.

Another possibility would be to only fit the axysymmetric part of the
shape at high order, and not the other structure. Then there is a 1-1
relation between parameters and fitted coefs:

model C0,C2,C4..CN-2; dx,dy,g1,g2
data  G0,G2,G4,..GN-2; S10,S01,S20-S02,S11

But there is info at higher orders, might as well use it.



AFTER STEP MEETING PASADENA, JUL 25/27 2005:

ideas for modifications:
 * make intrinsic beta smaller in setpsfmat (quadratic difference?)
 * speed up cat2sh by fitting wrt center of pixels, and then shifting
  (avoids building matrix many times over) 
 * fit shapes to higher order (rather than to 1st order in g1, g2,
exponentiate the (1 + g1 S1 + g2 S2) operators)
 * fit only to the circularly symmetric part of the shapelets, plus
n=2 cpts?
 * try the deconvolved shapelets approach of Massey et al?
 * figure out why get high covariances 


TESTS ON PURE, HIGH S/N DEVAUC, AUG 10 2005:

shear .08, .06 on round devauc galaxies. make with artdata.

testeffects of beta_intr, order, and downweighting coefs beyond order 2

radius (pix)                       2     3     4
N=8:
beta_intr=beta; downwt by x10:  .0774 .0773 .0770
                   no downwt:   .0455 .0433 .0422
beta_intr=sqrtdiff, downwt x10: .0800 .0793 .0787
                   no downwt:   .0678 .0598 .0551
SAME WITH N=12:
beta_intr=beta; downwt by x10:  .0801 .0798 .0794
                   no downwt:   .0567 .0482 .0408
beta_intr=sqrtdiff, downwt x10: .0809 .0806 .0802
                   no downwt:   .0727 .0605 .0496


SAME AGAIN, but now with correct noise model - simple read noise, no poisson

Fit only the coefs up to order Norder-4: since the model includes
coefs only to Norder-2, the sheared Norder-2 coefs are not predicted
correctly (have xtalk from round Norder shapes as well.) Now works
very well for devauc, even down to shapelet order N=8.
Fitting radius 4 beta; background from annulus between 2rfit & 4rfit.
Use beta_intr=beta_postseeing. Get <1% accuracy for N=8,12,16.
Minimum N required is 8. 
               (parameters=g1,g2,dx,dy,C0,C2,C4,C6 = 8; fit 15 sh.coefs).


Extra filtering on results:

sh2gerrshift now also writes out the fitted coefs of the round,
pre-shearing source (c0, c2, c4, c6, .., cN-2).
The ci are normalized so that they give the flux fraction contained in each cpt.
Rejecting sources in which |c0-1|>0.5 gets rid of sources with
 * poor fit
 * bad beta
 * etc etc
and seems a very effective way of getting rid of a clump of points around g1,g2=0,0 in the STEP simulations.
Also filter on sig_g1>0; the few cases in which the cov matrix is not
+ve definite are flagged this way.

STEP simulations with N=8 do fine now. Normalization works well. Also
psf2 corrected down to <0.5%.
IRAF artdata devauc+expdisk simulations perform fine as well, to 1% in
normalization for a g=.08,.06 set of high S/N images, intrinsically
round galaxies.
Error propagation appears correct for the artdata galaxies.


So now filter for test.g files to use is

awk '$15==0 && $3>10*$4 && $11>0 && ($16-1)**2<1

$11 is sig_g1 (set to -1 if cov matrix goes wrong)
$16 is c0, the coef of the leading-order term in the pre-shear round
shape.

Some signs that |$16-1|<0.5 gives better results (on STEP simul, N=8,
with shear 0.1), about 1% less bias.
STEP g=0.1 gives .09543 as error-weighted mean g1,g2,
but some of that bias may be a polarizability correction.

repeat with n=12:






PSF-matched photometry:

implemented a routine that takes a shape and its PSF, and
- deconvolves the PSF, replacing it with a gaussian kernel of dispersion q
- then calculates the weighted-aperture flux of this 'cleaned' image,
  using a weight function with the same q. 
This works quite well on model sersic profiles, but not perfectly:
leaves residuals at several % level. The reason is that the source and
PSF are not perfectly fitted with the shapelet expansion - typically
some flux is missed on the outskirts, and sometimes in the center as
well.
Fix:
*The flux missed in the core of the galaxy can be compensated for by
calculating the residual of the shapelet expansion, and calculating
the gauss-weighted flux (without PSF cleaning). This corrects the high
sersic index errors (which are mostly a too cf shapelet and so miss
some flux in the middle. The only cases where big residuals are left
is  then the low PSF moffat indices (where shapelet expansion missed
flux in center and wings). 
*Typically the shapelet flux is too high for low-moffat indices (n=2),
independent of sersic index. So this is a PSF effect. How to fix this?
Determine how much PSF flux is missed with shapelet expansion? How
much gauss-weighted flux is missed?



MORE on shears:

Improve filtering on 'odd' shapes: now this is done via radial order,
but azimuthal order is probably more relevant. Better filter out a
fixed fraction of sources, rather than a priory setting such cuts?



CHECK WHETHER THE FACTOR 1.3 IS USED CONSISTENTLY, AND WHETHER THE PSF BETA LOWER LIMIT DOES NOT RESULT IN TWO FACTORS OF 1.3!


PSF-matched photometry:

in the tests testpsfcorphot_mc_new.F, the background is zero. But an
annulus bg is determined in the shapelet fits. This value is NOT used
in the correction factors (based on the pixel residuals: these use the
CORRECT background (=0). This is not realistic: in practice you dont
know the background. It is done here to anable a calculation of the
theoretical Fq value. A better approach would be to calculate a
theoretical Fq with background subtraction - ie a kind of compensated
aperture instead of a gaussian that is everywhere positive.  SHould
not make much difference: the point is that the residuals from the
shapelet expansion (of which the b/g is a part) can be corrected for
approximately.

in listpsfcorphot2.F, which performs aperture phot on real images, the
background IS subtracted also from the pixel residuals. (determined
from an annulus outside 4*beta). So here we do form a kind of
compensated aperture flux, which should give realistic colours.
Needs some work to formalize properly.


Experimentation with testpsfcorphot_mc_new:

* fitting a local background, and then calculating the residuals with
respect to the REAL background, works well. Generates corrections at
the 5% level, gets down to 1-2%, (directory previous-respsf)

* performing shapelets fits with the REAL background level also works
well, down to a few %. Correction terms are then not effective, or
needed. Corrections are basically zero (as shapelet fns ~ orthogonal
to the filter). Does not work as well as above. (directory truebg)

* listpsfcorphot tested on fake 2kx2k images with 1000 gals, 100 stars, very high S/N. Compare the median gaap flux for all.


* directory v4: uses testpsfcorphot_mc_new2.F (which uses the pixresid
subroutine in psfcorphot.F, rather than calculating the residuals
directly). ie, any background that is oversubtracted is recovered. Choices:
  - fit bg in shapelet expansion - annulus  radius 4 beta
  - do NOT subtract bg when calculating residuals (ie residuals include b/g differences)
  - fit residuals out to radius max(10,6*max(beta,sqrt(qq2))) where qq2 is filter radius^2
This works well - similar to original tests.

* directory v5: as v4, but residuals are now calculated assuming the
fitted background is the correct one (ie any background that is
oversubtracted is lost to the photometry). The applied correction
terms are now tiny, and leave residuals at the 5% level. Reason:
theoretical fluxes assume correct b/g, but the calculated fluxes do
not.

* directory v6: uses _mc_new3.F, which measures a compensated-aperture
flux: convolve with G(q), then weight by (G(q)-0.25 G(2q)). Should be
independent of background terms? NOT REALLY.
 does not work that well, but reasonably - 3% errors, say, without
residual corrections.

* directory v5a: as v4, but using correct b/g (0) for shapelet
expansion and when calculating residuals
 straight value is now much better (few %); residuals improve things
even more.

* directory v5-rfit4beta: use fitted backgrounds, 
bg determined with fitting radius 4beta for PSF and galaxy. Not very good.
Now try 8 beta: Gives pretty good results!

****WAS A BUG: the pixel residuals were being evaluated around wrong
    center (51+dx,51+dx) instead of dy in 2nd argument. Threw off the
    results for the case with ctr offset (0,0.5).  Now fixed. Works
    well. N=8 is BETTER than n=12: result of overfitting+numerics? So
    stick with N=8. Needs correct background - otherwise the fluxes
    will be wrong (as in any other method!). There is no getting
    around this, especially for the PSF. Ditto the need to normalize
    the PSF correctly by having a consistent normalization of
    zeropoints, incorporating the tail of the PSF as it should be.
so: publish!


===================

More on shears: discovered that PSF fitting used bg fitting radius of
fitradius, whereas source fitting used 2*fitradius. Fixed this in
psfcat2sh.F rerun on STEP1 data shows that it makes very little
difference, at the 1E-4 level in shears in fact.

Still doubts on whether the correction factor should be 1-e^2 or 1-e^2/2 : former suggests that a set of e=1 galaxies has zero shear response, but real answer should be 0.5... Check the matrix manipulations in shears from shapelets paper.


Beta estimate for FDF test data was not very optimal. Discovered that
fitbeta only fits the range r=0 - fitradius/2; typically this means
radius 0-2beta. fixed this so that full radius range is used. This
pushes beta fitted values up for the FDF data.  Would be nice to have
a plot that puts magnified PSF fit residuals in right place on an x,y
image.


GAUSSIANIZATION TODOS:

gaussianizepsf: enforce explicitly that kernel integrates to unity,
this catches photometric losses from imperfect shapelet description of
PSF.  Easily done by replacing 'sum' by '1.' in 2nd output line of the
programme.

sort out centroiding options. Now have routie tweakctr.csh which
iterates centers of the sources.

define KSB moments straight from shapelet expansions

