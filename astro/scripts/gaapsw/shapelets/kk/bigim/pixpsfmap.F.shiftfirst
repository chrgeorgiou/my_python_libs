      parameter (mstar=15,mstar2=2*mstar+1,m2=32,nstarmax=10000)
      dimension starpatch(-mstar:mstar,-mstar:mstar,nstarmax)
c      dimension zz(m2,m2)
      dimension starmod(-mstar:mstar,-mstar:mstar,nstarmax)
      dimension starcoefs(-mstar:mstar,-mstar:mstar,mmpoly2)
      dimension x(nstarmax),y(nstarmax),beta(nstarmax),flx(nstarmax),
     :     ch2(nstarmax)
      dimension coefs(mmpoly2),tofit(nstarmax),bestfit(nstarmax),
     :     w(nstarmax)
      dimension shape(msh)

      nim=51
      call openfits('inimage.fits',nim,nx,ny)

      call pgbeg(0,'/xs',8,6)
      call pgask(.false.)

      do istar=1,nstarmax
    1     read(*,*,err=1,end=2) x(istar),y(istar)
          ix=nint(x(istar)-mstar)
          iy=nint(y(istar)-mstar)
          xc=x(istar)-ix+1
          yc=y(istar)-iy+1
          isok=igetsec(nim,nx,ny,ix,iy,mstar2,mstar2,
     :        starpatch(-mstar,-mstar,istar),mstar2*mstar2)
          if (isok.ne.0) then
              write(0,*) isok, x(istar),y(istar)
              call ftrprt('stderr',isok)
              goto 1
          endif
          dx=xc-mstar-1
          dy=yc-mstar-1
          call shiftpatch(starpatch(-mstar,-mstar,istar),mstar2,mstar2,dx,dy)
          xc=mstar+1
          yc=mstar+1
          call fitbg(starpatch(-mstar,-mstar,istar),
     :        mstar2,mstar2,mstar2,xc,yc,mstar*1.,bg)
          call fitbeta(starpatch(-mstar,-mstar,istar),
     :        mstar2,mstar2,mstar2,xc,yc,mstar*1.,bg,beta(istar))
      enddo
    2 nstar=istar-1
      write(0,*) 'Read ',nstar,' stars.'

      betapsf=fmedian(nstar,beta)*1.3
      write(0,*) 'Adopted beta ',betapsf
      nsh=8
      do istar=1,nstar
         bg=0.
c          call fitbg(starpatch(-mstar,-mstar,istar),
c     :        mstar2,mstar2,mstar2,xc,yc,mstar*1.,bg)
          if (bg.eq.0.) bg=1e-31
          call fitshapelets(starpatch(-mstar,-mstar,istar),
     :        mstar2,mstar2,mstar2,xc,yc,mstar*1.,bg,
     :        shape,nsh,betapsf)
          flx(istar)=seriessum(shape)
          do iy=-mstar,mstar
             do ix=-mstar,mstar
                starpatch(ix,iy,istar)=bg+(starpatch(ix,iy,istar)-bg)/flx(istar)
             enddo
          enddo
          pk=starpatch(0,0,istar)
          if (mod(istar,(nstar/48+1)).eq.0) then
             call showpatch(starpatch(-mstar,-mstar,istar),
     :            mstar2,mstar2,mstar2,mstar2,xc,yc,14.,-0.1*pk,pk)
          endif
      enddo
      call pgend

c fit normalized stars as function of field position.

      do is=1,nstar
         w(is)=sqrt(flx(is))
      enddo
      norder=min(4,int(nstar/20))
      niter=3
      clip=4.
      open(12,file='pixmap.par',status='old',err=3)
      read(12,*,err=3) norder,niter,clip
      close(12)
 3    write(0,*) 'fit order, no. iters, sigclip: ',norder,niter,clip
      nmod=(norder+1)*(norder+2)/2
      do iy=-mstar,mstar
         do ix=-mstar,mstar
            do is=1,nstar
               tofit(is)=starpatch(ix,iy,is)
            enddo
            call fitlegendre(nstar,nx*1.,ny*1.,x,y,tofit,w,norder,niter,clip,coefs,bestfit)
            do imod=1,nmod
               starcoefs(ix,iy,imod)=coefs(imod)
            enddo
            do is=1,nstar
               starmod(ix,iy,is)=bestfit(is)
            enddo
         enddo
         write(0,*) 'Fitted row ',iy
      enddo

      npanel=int(sqrt(nmod-0.001))+1
      call pgbeg(0,'/xs',npanel,npanel)
      call pgask(.false.)
      pk=starcoefs(0,0,1)
      zhi=pk
      zlo=-0.1*pk
      do imod=1,nmod
         call showpatch(starcoefs(-mstar,-mstar,imod),
     :        mstar2,mstar2,mstar2,mstar2,xc,yc,14.,-0.1*pk,pk)
         zhi=0.1*pk
      enddo
      call pgend

c write out the PSF components as a 3D fits image.
      call put3('pixpsf.fits',mstar2,mstar2,nmod,
     :     starcoefs,mstar2,mstar2,nmod)

c show plots of residuals between model and stars.

c      call pgbeg(0,'/xs',6,4)
c      call pgask(.false.)
      do istar=1,nstar
         pk=starpatch(0,0,istar)
c         call showpatch(starpatch(-mstar,-mstar,istar),
c     :        mstar2,mstar2,mstar2,mstar2,xc,yc,14.,-0.1*pk,pk)
c         call showpatch(starmod(-mstar,-mstar,istar),
c     :        mstar2,mstar2,mstar2,mstar2,xc,yc,14.,-0.1*pk,pk)
         ch2tmp=0
         do iy=-mstar,mstar
            do ix=-mstar,mstar
               starmod(ix,iy,istar)=starpatch(ix,iy,istar)
     :              -starmod(ix,iy,istar)
               ch2tmp=ch2tmp+starmod(ix,iy,istar)**2
            enddo
         enddo
         ch2(istar)=sqrt(ch2tmp)*flx(istar)
c         call showpatch(starmod(-mstar,-mstar,istar),
c     :        mstar2,mstar2,mstar2,mstar2,xc,yc,14.,-0.05*pk,0.05*pk)
      enddo
c      call pgend

      call put3('psfstars.fits',mstar2,mstar2,nstar,
     :     starpatch,mstar2,mstar2,nstar)

      call put3('psfresid.fits',mstar2,mstar2,nstar,
     :     starmod,mstar2,mstar2,nstar)

      write(*,*) '#',betapsf,norder,niter,clip
      do is=1,nstar
         write(*,1001) is,x(is),y(is),flx(is),starpatch(0,0,is),
     :        starmod(0,0,is),ch2(is)
      enddo
 1001 format(i7,2f11.3,g14.6,2f10.5,g14.5)
      end









c code to shift an image in Fourier space speqacf is 1D complex array.q

      subroutine shiftpatch(pix,nx,ny,dx,dy)
      parameter (maxzz=4096)
      real zz(maxzz)
      real pix(nx,ny)

      mx=1
      do while(mx.lt.nx)
         mx=mx*2
      enddo
      my=1
      do while(my.lt.ny)
         my=my*2
      enddo
      if (mx*my.gt.maxzz) then
         write(0,*) '*** CANNOT SHIFT PATCH *** DIMENSIONS MISMATCH'
         return
      endif
c copy pix into temporary padded zz array with dimensions powers of 2
      call copypad(pix,nx,ny,zz,mx,my)
c shift zz array by FT techniques
      call ftshift(zz,mx,my,dx,dy)
c copy result back
      call copybit(zz,mx,my,pix,nx,ny)
      return
      end

      subroutine copypad(pix,nx,ny,zz,mx,my)
c copy first nx*ny elements from pix array into larger zz array; pad rest with 0
      real pix(nx,ny),zz(mx,my)
      do iy=1,ny
         do ix=1,nx
            zz(ix,iy)=pix(ix,iy)
         enddo
         do ix=nx+1,mx
            zz(ix,iy)=0
         enddo
      enddo
      do iy=ny+1,my
         do ix=1,mx
            zz(ix,iy)=0
         enddo
      enddo
      return
      end

      subroutine copybit(zz,mx,my,pix,nx,ny)
c copy first nx*ny elements from zz array into smaller pix array
      real zz(mx,my),pix(nx,ny)
      do iy=1,nx
         do ix=1,ny
            pix(ix,iy)=zz(ix,iy)
         enddo
      enddo
      return
      end

      subroutine ftshift(zz,mx,my,dx,dy)
      real zz(mx,my)
      parameter (maxx=1024)
      complex spec(maxx)
      do i=1,mx/2
         spec(i)=0.
      enddo
      call rlft3(zz,spec,mx,my,1,1)
      dkx=2*3.14159265/mx
      dky=2*3.14159265/my
      do i=1,mx,2
         ak1=(i-1)/2
         do j=1,my
            if (j.gt.my/2) then
               ak2=j-my-1
            else
               ak2=j-1
            endif
            xa=zz(i,j)
            ya=zz(i+1,j)
            c=cos(dx*ak1*dkx+dy*ak2*dky)
            s=sin(dx*ak1*dkx+dy*ak2*dky)
            zz(i,j)=xa*c+ya*s
            zz(i+1,j)=-xa*s+ya*c
         enddo
      enddo
      call rlft3(zz,spec,mx,my,1,-1)
      fac=2./(mx*my)
      do j=1,my
         do i=1,mx
            zz(i,j)=zz(i,j)*fac
         enddo
      enddo
      return
      end



